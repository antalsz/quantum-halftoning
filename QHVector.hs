{-# LANGUAGE TypeSynonymInstances, TypeFamilies, RecordWildCards, LambdaCase, UnicodeSyntax #-}

import Data.Foldable
import Control.Monad

import Data.List.Split
import Numeric.Natural
import Data.Word
import Control.Monad.Except

import Foreign.Storable
import Control.Concurrent
import Control.Monad.ST
import System.Random

import qualified Data.Vector.Storable         as V
import qualified Data.Vector.Storable.Mutable as MV

import Graphics.Gloss

import Codec.Picture hiding (Image(..))
import qualified Codec.Picture as JP
import Codec.Picture.Types hiding (Image(..))
import Codec.Picture.Metadata
import GHC.Float

import System.Environment
import System.Exit
import Text.Read

--------------------------------------------------------------------------------

type ùîπ = Bool
type ‚Ñï = Natural
type ‚Ñù = Double

(<&>) ‚à∑ Functor f ‚áí f a ‚Üí (a ‚Üí b) ‚Üí f b
(<&>) = flip (<$>)
infixl 1 <&>
{-# INLINABLE (<&>) #-}

--------------------------------------------------------------------------------

data Image a = Image { width  ‚à∑ !Int
                     , height ‚à∑ !Int
                     , pixels ‚à∑ !(V.Vector a) }
             deriving (Eq, Ord, Show, Read)

at ‚à∑ Storable a ‚áí Image a ‚Üí Int ‚Üí Int ‚Üí a
at Image{..} x y | x < width && y < height = pixels `V.unsafeIndex` (x + y*width)
                 | otherwise               = error $  "Image index "   ++ show (x,y)
                                                   ++ " out of range " ++ show (width,height)
{-# INLINABLE at #-}

forCoordinates_ ‚à∑ (Enum x, Num x, Enum y, Num y, Applicative f)
                ‚áí x ‚Üí y ‚Üí (x ‚Üí y ‚Üí f ()) ‚Üí f ()
forCoordinates_ xSize ySize act =
  for_ [0..ySize-1] $ \y ‚Üí
    for_ [0..xSize-1] $ \x ‚Üí
      act x y
{-# INLINABLE forCoordinates_ #-}
{-# SPECIALIZE forCoordinates_ ‚à∑ Int ‚Üí Int ‚Üí (Int ‚Üí Int ‚Üí ST s ()) ‚Üí ST s () #-}
{-# SPECIALIZE forCoordinates_ ‚à∑ Int ‚Üí Int ‚Üí (Int ‚Üí Int ‚Üí IO   ()) ‚Üí IO   () #-}

expandWith ‚à∑ Storable a ‚áí ‚Ñï ‚Üí (a ‚Üí a) ‚Üí Image a ‚Üí Image a
expandWith nNat f img@Image{..} =
  let n | nNat > fromIntegral (maxBound ‚à∑ Int) = error "expandWith: scale factor out of range"
        | otherwise                            = fromIntegral nNat
      
      width'  = n*width
      height' = n*height
      pixels' = V.create $ do
                  pixels' ‚Üê MV.new $ width' * height'
                  forCoordinates_ width height $ \x y ‚Üí
                    let value = f $ at img x y
                        dest' = n*x + n*y*width'
                    in forCoordinates_ n n $ \dx dy ‚Üí
                         MV.write pixels' (dest' + dx + width'*dy) value
                  pure pixels'
  in Image { width = width', height = height', pixels = pixels' }

toLists ‚à∑ Storable a ‚áí Image a ‚Üí [[a]]
toLists Image{..} = chunksOf width $ V.toList pixels

--------------------------------------------------------------------------------

coin ‚à∑ ‚Ñù ‚Üí IO ùîπ
coin p = (< p) <$> randomIO

--------------------------------------------------------------------------------

build ‚à∑ Image ‚Ñù ‚Üí IO (MV.IOVector Word8)
build img@Image{..} = do
  vec ‚Üê MV.new $ 4*width*height
  forCoordinates_ width height $ refresh img vec
  pure vec

refresh ‚à∑ Image ‚Ñù ‚Üí MV.IOVector Word8 ‚Üí Int ‚Üí Int ‚Üí IO ()
refresh img vec x y = do
  let index = x + width img * y
  value ‚Üê coin (at img x y) <&> \case
             True  ‚Üí 255
             False ‚Üí 0
  MV.write vec (4*index + 0) value
  MV.write vec (4*index + 1) value
  MV.write vec (4*index + 2) value
  MV.write vec (4*index + 3) 255

randomIndex ‚à∑ Image ‚Ñù ‚Üí IO (Int,Int)
randomIndex Image{..} = (,) <$> randomRIO (0, width-1) <*> randomRIO (0, height-1)

refreshRandom ‚à∑ Image ‚Ñù ‚Üí MV.IOVector Word8 ‚Üí IO ()
refreshRandom img vec = uncurry (refresh img vec) =<< randomIndex img

--------------------------------------------------------------------------------

probability ‚à∑ ‚Ñï ‚Üí Maybe (‚Ñù ‚Üí ‚Ñù)
probability 1  = Just $
  \case x | x < 1/2   ‚Üí 0
          | otherwise ‚Üí 1

probability 2  = Just $
  \case x | x < 0.4411763 ‚Üí 0.0000000
          | x < 0.5588237 ‚Üí 0.5000000
          | otherwise     ‚Üí 1.0000000

probability 4  = Just $
  \case x | x < 0.3700282 ‚Üí 0.0000000
          | x < 0.6299718 ‚Üí 0.5000000
          | otherwise     ‚Üí 1.0000000

probability 9  = Just $
  \case x | x < 0.2887258 ‚Üí 0.0000000
          | x < 0.4735139 ‚Üí 0.2536613
          | x < 0.5264861 ‚Üí 0.5000000
          | x < 0.7112742 ‚Üí 0.7463387
          | otherwise     ‚Üí 1.0000000

probability 16 = Just $
  \case x | x < 0.2343332 ‚Üí 0.0000000
          | x < 0.3820798 ‚Üí 0.1446826
          | x < 0.5000000 ‚Üí 0.3812571
          | x < 0.6179202 ‚Üí 0.6187429
          | x < 0.7656668 ‚Üí 0.8553174
          | otherwise     ‚Üí 1.0000000

probability 25 = Just $
  \case x | x < 0.1975705 ‚Üí 0.0000000
          | x < 0.3237746 ‚Üí 0.0952646
          | x < 0.4289575 ‚Üí 0.2667862
          | x < 0.5000000 ‚Üí 0.4382326
          | x < 0.5710425 ‚Üí 0.5617674
          | x < 0.6762254 ‚Üí 0.7332138
          | x < 0.8024295 ‚Üí 0.9047354
          | otherwise     ‚Üí 1.0000000

probability 36 = Just $
  \case x | x < 0.1706287 ‚Üí 0.0000000
          | x < 0.2791773 ‚Üí 0.0666800
          | x < 0.3720039 ‚Üí 0.1911963
          | x < 0.4580385 ‚Üí 0.3406649
          | x < 0.5419615 ‚Üí 0.5000000
          | x < 0.6279961 ‚Üí 0.6593351
          | x < 0.7208227 ‚Üí 0.8088037
          | x < 0.8293713 ‚Üí 0.9333200
          | otherwise     ‚Üí 1.0000000

probability _  = Nothing

--------------------------------------------------------------------------------

class Pixel a ‚áí ToGrayscale a where
  grayscale       ‚à∑ a ‚Üí ‚Ñù
  grayscaleVector ‚à∑ Metadatas ‚Üí JP.Image a ‚Üí V.Vector ‚Ñù

instance ToGrayscale Pixel8 where
  grayscale       = wordGrayscale
  grayscaleVector = plainGrayscaleVector

instance ToGrayscale Pixel16 where
  grayscale       = wordGrayscale
  grayscaleVector = plainGrayscaleVector

instance ToGrayscale Pixel32 where
  grayscale       = wordGrayscale
  grayscaleVector = plainGrayscaleVector

instance ToGrayscale PixelF where
  grayscale       = float2Double
  grayscaleVector = plainGrayscaleVector

wordGrayscale ‚à∑ (Integral g, Bounded g) ‚áí g ‚Üí ‚Ñù
wordGrayscale g = fromIntegral g / fromIntegral (maxBound `asTypeOf` g)
{-# INLINABLE wordGrayscale #-}

plainGrayscaleVector ‚à∑ (ToGrayscale a, a ~ PixelBaseComponent a) ‚áí Metadatas ‚Üí JP.Image a ‚Üí V.Vector ‚Ñù
plainGrayscaleVector _ JP.Image{..} = V.map grayscale imageData
{-# INLINABLE plainGrayscaleVector #-}

grayscaleImage ‚à∑ ToGrayscale a ‚áí Metadatas ‚Üí JP.Image a ‚Üí Image ‚Ñù
grayscaleImage md img@JP.Image{..} = Image { width  = imageWidth
                                           , height = imageHeight
                                           , pixels = grayscaleVector md img }

readGrayscale ‚à∑ FilePath ‚Üí ExceptT String IO (Image ‚Ñù)
readGrayscale file = do
  (dimg, md) ‚Üê ExceptT $ readImageWithMetadata file
  case dimg of
    ImageY8  img ‚Üí pure $ grayscaleImage md img
    ImageY16 img ‚Üí pure $ grayscaleImage md img
    ImageYF  img ‚Üí pure $ grayscaleImage md img
    _            ‚Üí throwError "Non-grayscale image format"

--------------------------------------------------------------------------------

mainWith ‚à∑ ‚Ñï ‚Üí Int ‚Üí FilePath ‚Üí IO ()
mainWith n freq file = do
  weightedCoin  ‚Üê maybe (die "Unknown expansion factor") pure $ probability (n*n)
  probabilities ‚Üê either die (pure . expandWith n weightedCoin)
                    =<< runExceptT (readGrayscale file)
  bitVector     ‚Üê build probabilities
  let bitmap = bitmapOfForeignPtr (width probabilities) (height probabilities)
                                  (BitmapFormat TopToBottom PxRGBA)
                                  (fst $ MV.unsafeToForeignPtr0 bitVector)
                                  False
  
  void . forkIO . forever $ do
    threadDelay   freq
    refreshRandom probabilities bitVector
  
  animate (InWindow "Quantum Halftoning"
                    (width probabilities, height probabilities)
                    (100,100))
          (greyN 0.5)
          (const bitmap)

main ‚à∑ IO ()
main = getArgs >>= \case
  [nStr, freqStr, file] ‚Üí do
    let parse what = maybe (die $ "Could not parse " ++ what) pure . readMaybe
    n    ‚Üê parse "expansion factor" nStr
    freq ‚Üê parse "refresh rate"     freqStr
    mainWith n freq file
  _ ‚Üí do
    name ‚Üê getProgName
    die $ "Usage: " ++ name ++ " N FREQ FILE"
